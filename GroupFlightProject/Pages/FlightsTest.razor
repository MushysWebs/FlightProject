<!-- -->

@page "/flightsTest"
@using System.IO
@using System.Diagnostics;
@using System.Text.Json;
@using Microsoft.Extensions.Logging


<h2>Flight Finder</h2>

<div class="flex-container">

    <div class="input-group">
        <label for="from">From:</label>
        <input class="input-field" @bind="from" />
    </div>

    <div class="input-group">
        <label for="to">To:</label>
        <input class="input-field" @bind="to" />
    </div>

    <div class="input-group">
        <label for="day">Day:</label>
        <input class="input-field" @bind="day" />
    </div>

    <button type="submit" class="btn" @onclick="SearchFlights">Find flights</button>

</div>

<div class="flex-container">
    <h2>Flights</h2>
    <textarea class="input-field" readonly>@flightsText</textarea>
</div>


<div class="input-row">
    <h2>Reserve</h2>

    <div class="input-group">
        <label for="reserveFlightCode">Flight code:</label>
        <input class="input-field" @bind="reserveFlightCode" readonly />
    </div>

    <div class="input-group">
        <label for="reserveAirline">Airline:</label>
        <input class="input-field" @bind="reserveAirline" readonly />
    </div>

    <div class="input-group">
        <label for="reserveDay">Day:</label>
        <input class="input-field" @bind="reserveDay" readonly />
    </div>

    <div class="input-group">
        <label for="reserveTime">Time:</label>
        <input class="input-field" @bind="reserveTime" readonly />
    </div>

    <div class="input-group">
        <label for="reserveCost">Cost:</label>
        <input class="input-field" @bind="reserveCost" readonly />
    </div>

    <div class="input-group">
        <label for="reserveName">Name:</label>
        <input class="input-field" @bind="reserveName" />
    </div>

    <div class="input-group">
        <label for="reserveCost">Citizenship:</label>
        <input class="input-field" @bind="reserveCitizenship" />
    </div>

    <button type="reserve" class="btn" @onclick="ReserveFlight">Reserve</button>

    <textarea class="input-field" readonly>@reservedFlight</textarea> <!--FOR DEBUGGING PURPOSES... TO SEE IF FLIGHT IS FOUND-->
</div>


<style>

    h2 {
        text-align: center;
    }

    .flex-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
        width: 100%;
    }

    .input-group {
        margin-bottom: 10px;
        flex: 1;
        display: flex;
    }

    .input-field {
        border: 1px solid #CCCCCC;
        border-radius: 5px;
    }

    .input-field, .btn {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
    }

    .btn {
        flex: 1;
        background-color: #007BFF;
        color: white;
        border: none;
        cursor: pointer;
    }

    .btn:hover {
        background-color: #0056b3;
    }

</style>

@code {
    private string[] flightsArray;
    private ReservationManager reservationManager;
    private string reservationsFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Traveless", "reservations.bin");

    public string reservationCode { get; set; }
    public string from { get; set; }
    public string to { get; set; }
    public string day { get; set; }
    public string flightsText { get; set; }
    public string reservedFlight { get; set; }

    public string reserveFlightCode { get; set; }
    public string reserveAirline { get; set; }
    public string reserveDay { get; set; }
    public string reserveTime { get; set; }
    public string reserveCost { get; set; }
    public string reserveName { get; set; }
    public string reserveCitizenship { get; set; }

    protected override async Task OnInitializedAsync()
    {
        reservationManager = new ReservationManager();
        await LoadFlights();
    }

    private async Task LoadFlights()
    {
        try
        {
            using var stream = await FileSystem.OpenAppPackageFileAsync("flights.csv");
            using var reader = new StreamReader(stream);
            var flights = await reader.ReadToEndAsync();
            flightsArray = flights.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
        }
        catch (Exception ex)
        {
            flightsText = $"Error loading flights: {ex.Message}";
        }
    }

    private void SearchFlights()
    {
        var filteredFlights = flightsArray
            .Where(flight =>
            {
                var elements = flight.Split(',');
                return elements.Length >= 5 &&
                    elements[2].Trim().Equals(from, StringComparison.OrdinalIgnoreCase) &&
                    elements[3].Trim().Equals(to, StringComparison.OrdinalIgnoreCase) &&
                    elements[4].Trim().Equals(day, StringComparison.OrdinalIgnoreCase);
            });

        if (filteredFlights.Any())
        {
            var selectedFlight = filteredFlights.First();
            var elements = selectedFlight.Split(',');
            reserveFlightCode = elements[0];
            reserveAirline = elements[1];
            reserveDay = elements[4];
            reserveTime = elements[5];
            reserveCost = elements[7];
        }

        flightsText = string.Join("\n", filteredFlights);
    }

    private async Task ReserveFlight()
    {
        if (string.IsNullOrEmpty(reserveFlightCode) || string.IsNullOrEmpty(reserveName) || string.IsNullOrEmpty(reserveCitizenship))
        {
            reservedFlight = "All fields must be filled to make a reservation.";
            return;
        }

        var matchingFlight = flightsArray.FirstOrDefault(flight =>
        {
            var elements = flight.Split(',');
            return elements.Length >= 5 &&
                elements[0].Trim().Equals(reserveFlightCode, StringComparison.OrdinalIgnoreCase);
        });

        if (matchingFlight != null)
        {
            var elements = matchingFlight.Split(',');
            if (int.TryParse(elements[6], out var seats) && seats > 0)
            {
                reservationCode = reservationManager.GenerateReservationCode();
                Reservation newReservation = new Reservation
                {
                    ReservationCode = reservationCode,
                    FlightCode = reserveFlightCode,
                    Airline = reserveAirline,
                    Cost = reserveCost,
                    Name = reserveName,
                    Citizenship = reserveCitizenship,
                    IsActive = true
                };
                reservationManager.Reservations.Add(newReservation);
                reservationManager.Persist();
                seats--;
                elements[6] = seats.ToString();
                flightsArray[Array.IndexOf(flightsArray, matchingFlight)] = string.Join(",", elements);

                reservedFlight = $"Reservation successful. Code: {reservationCode}. The reservations file is located at: {reservationManager.filePath}";
            }
            else
            {
                reservedFlight = "There are no seats available.";
            }
        }
        else
        {
            reservedFlight = "Flight not found.";
        }
    }
}
