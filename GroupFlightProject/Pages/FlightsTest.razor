@page "/flightsTest"
@using System.IO


<h2>Flight Finder</h2>

<div class="flex-container">

    <div class="input-group">
        <label for="from">From:</label>
        <input class="input-field" @bind="from" />
    </div>

    <div class="input-group">
        <label for="to">To:</label>
        <input class="input-field" @bind="to" />
    </div>

    <div class="input-group">
        <label for="day">Day:</label>
        <input class="input-field" @bind="day" />
    </div>

    <button type="submit" class="btn" @onclick="SearchFlights">Find flights</button>

</div>

<div class="flex-container">
    <h2>Flights</h2>
    <textarea class="input-field" readonly>@flightsText</textarea>
</div>


<div class="input-row">
    <h2>Reserve</h2>

    <div class="input-group">
        <label for="reserveFlightCode">Flight code:</label>
        <input class="input-field" @bind="reserveFlightCode" />
    </div>

    <div class="input-group">
        <label for="reserveAirline">Airline:</label>
        <input class="input-field" @bind="reserveAirline" />
    </div>

    <div class="input-group">
        <label for="reserveDay">Day:</label>
        <input class="input-field" @bind="reserveDay" />
    </div>

    <div class="input-group">
        <label for="reserveTime">Time:</label>
        <input class="input-field" @bind="reserveTime" />
    </div>

    <div class="input-group">
        <label for="reserveCost">Cost:</label>
        <input class="input-field" @bind="reserveCost" />
    </div>

    <div class="input-group">
        <label for="reserveName">Name:</label>
        <input class="input-field" @bind="reserveName" />
    </div>

    <div class="input-group">
        <label for="reserveCost">Cost:</label>
        <input class="input-field" @bind="reserveCost" />
    </div>

    <button type="reserve" class="btn" @onclick="ReserveFlight">Reserve</button>

    <textarea class="input-field" readonly>@reservedFlight</textarea> <!--FOR DEBUGGING PURPOSES... TO SEE IF FLIGHT IS FOUND-->
</div>


<style>

    h2 {
        text-align: center;
    }

    .flex-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
        width: 100%;
    }

    .input-group {
        margin-bottom: 10px;
        flex: 1;
        display: flex;
    }

    .input-field {
        border: 1px solid #CCCCCC;
        border-radius: 5px;
    }

    .input-field, .btn {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
    }

    .btn {
        flex: 1;
        background-color: #007BFF;
        color: white;
        border: none;
        cursor: pointer;
    }

    .btn:hover {
        background-color: #0056b3;
    }

</style>

@code {
    public string from { get; set; }
    public string to { get; set; }
    public string day { get; set; }
    public string flightsText { get; set; }
    public string reservedFlight { get; set; } //FOR DEBUGGING PURPOSES... TO SEE IF FLIGHT IS FOUND

    public string reserveFlightCode { get; set; }
    public string reserveAirline { get; set; }
    public string reserveDay { get; set; }
    public string reserveTime { get; set; }
    public string reserveCost { get; set; }
    public string reserveName { get; set; }
    public string reserveCitizenship { get; set; }

    private string[] flightsArray;

    protected override async Task OnInitializedAsync()
    {
        await LoadFlights();
    }

    private async Task LoadFlights()
    {
        try
        {
            using var stream = await FileSystem.OpenAppPackageFileAsync("flights.csv");
            using var reader = new StreamReader(stream);

            var flights = await reader.ReadToEndAsync();
            var flightsArray = flights.Split('\n');
        }
        catch (FileNotFoundException ex)
        {
            flightsText = "Flights file not found.";
        }
    }

    private async Task SearchFlights()
    {
        try
        {
            using var stream = await FileSystem.OpenAppPackageFileAsync("flights.csv");
            using var reader = new StreamReader(stream);

            var flights = await reader.ReadToEndAsync();
            var flightsArray = flights.Split('\n');

            var filteredFlights = flightsArray
                .Where(flight =>
                {
                    var elements = flight.Split(',');
                    return elements.Length >= 5 &&
                        elements[2].Trim().Equals(from, StringComparison.OrdinalIgnoreCase) &&
                        elements[3].Trim().Equals(to, StringComparison.OrdinalIgnoreCase) &&
                        elements[4].Trim().Equals(day, StringComparison.OrdinalIgnoreCase);
                })
                .Select(flight =>
                {
                    //removing the seat number from displaying
                    var elements = flight.Split(',');
                    return string.Join(",", elements.Take(elements.Length - 2)) + "," + elements.Last();
                })
                .ToList();

            flightsText = string.Join("\n", filteredFlights);
        }
        catch (FileNotFoundException ex)
        {
            flightsText = "Flights file not found.";
        }
    }

    private async Task ReserveFlight()
    {
        try
        {
            var flightToReserve = flightsArray.FirstOrDefault(flight =>
            {
                var elements = flight.Split(',');
                return elements.Length >= 5 &&
                    elements[0].Trim().Equals(reserveFlightCode, StringComparison.OrdinalIgnoreCase) &&
                    elements[1].Trim().Equals(reserveAirline, StringComparison.OrdinalIgnoreCase) &&
                    elements[2].Trim().Equals(reserveDay, StringComparison.OrdinalIgnoreCase) &&
                    elements[3].Trim().Equals(reserveTime, StringComparison.OrdinalIgnoreCase) &&
                    elements[4].Trim().Equals(reserveCost, StringComparison.OrdinalIgnoreCase);
            });

            if (flightToReserve != null)
            {
                reservedFlight = $"Reserved Flight: {flightToReserve}";
                // flight found
                // save the reservation
            }
            else
            {
                // flight not found
                
            }
        }
        catch (Exception ex)
        {
            flightsText = "Error while reserving the flight.";
        }
    }
}