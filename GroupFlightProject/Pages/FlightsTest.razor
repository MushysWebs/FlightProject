@page "/flightsTest"
@using System.IO
@using System.Diagnostics;
@using System.Runtime.Serialization.Formatters.Binary;


<h2>Flight Finder</h2>

<div class="flex-container">

    <div class="input-group">
        <label for="from">From:</label>
        <input class="input-field" @bind="from" />
    </div>

    <div class="input-group">
        <label for="to">To:</label>
        <input class="input-field" @bind="to" />
    </div>

    <div class="input-group">
        <label for="day">Day:</label>
        <input class="input-field" @bind="day" />
    </div>

    <button type="submit" class="btn" @onclick="SearchFlights">Find flights</button>

</div>

<div class="flex-container">
    <h2>Flights</h2>
    <textarea class="input-field" readonly>@flightsText</textarea>
</div>


<div class="input-row">
    <h2>Reserve</h2>

    <div class="input-group">
        <label for="reserveFlightCode">Flight code:</label>
        <input class="input-field" @bind="reserveFlightCode" readonly />
    </div>

    <div class="input-group">
        <label for="reserveAirline">Airline:</label>
        <input class="input-field" @bind="reserveAirline" readonly />
    </div>

    <div class="input-group">
        <label for="reserveDay">Day:</label>
        <input class="input-field" @bind="reserveDay" readonly />
    </div>

    <div class="input-group">
        <label for="reserveTime">Time:</label>
        <input class="input-field" @bind="reserveTime" readonly />
    </div>

    <div class="input-group">
        <label for="reserveCost">Cost:</label>
        <input class="input-field" @bind="reserveCost" readonly />
    </div>

    <div class="input-group">
        <label for="reserveName">Name:</label>
        <input class="input-field" @bind="reserveName" />
    </div>

    <div class="input-group">
        <label for="reserveCost">Citizenship:</label>
        <input class="input-field" @bind="reserveCitizenship" />
    </div>

    <button type="reserve" class="btn" @onclick="ReserveFlight">Reserve</button>

    <textarea class="input-field" readonly>@reservedFlight</textarea> <!--FOR DEBUGGING PURPOSES... TO SEE IF FLIGHT IS FOUND-->
</div>


<style>

    h2 {
        text-align: center;
    }

    .flex-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
        width: 100%;
    }

    .input-group {
        margin-bottom: 10px;
        flex: 1;
        display: flex;
    }

    .input-field {
        border: 1px solid #CCCCCC;
        border-radius: 5px;
    }

    .input-field, .btn {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
    }

    .btn {
        flex: 1;
        background-color: #007BFF;
        color: white;
        border: none;
        cursor: pointer;
    }

    .btn:hover {
        background-color: #0056b3;
    }

</style>

@code {


    public string reservationCode { get; set; }

    public string from { get; set; }
    public string to { get; set; }
    public string day { get; set; }
    public string flightsText { get; set; }
    public int numberOfSeats { get; set; }

    public string reservedFlight { get; set; } //FOR DEBUGGING PURPOSES... TO SEE IF FLIGHT IS FOUND

    public string reserveFlightCode { get; set; }
    public string reserveAirline { get; set; }
    public string reserveDay { get; set; }
    public string reserveTime { get; set; }
    public string reserveCost { get; set; }
    public string reserveName { get; set; }
    public string reserveCitizenship { get; set; }

    private string[] flightsArray;
    private ReservationManager reservationManager;

    private string flightsFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Traveless", "flights.csv");
    private string reservationsFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Traveless", "reservations.bin");



    public class Reservation
    {
        public string ReservationCode { get; set; }
        public string FlightCode { get; set; }
        public string Airline { get; set; }
        public string Cost { get; set; }
        public string Name { get; set; }
        public string Citizenship { get; set; }
        public bool IsActive { get; set; }

        //mutator methods---------------
        public void SetPassengerName(string name)
        {
            if (!string.IsNullOrEmpty(name))
            {
                Name = name;
            }
            else
            {
                throw new ArgumentException("Passenger name is empty");
            }
        }
    }
    public class ReservationManager
    {
        public List<Reservation> Reservations { get; set; } = new List<Reservation>();
        private string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Traveless", "reservations.js");

        public ReservationManager()
        {
            // Ensure the directory exists
            Directory.CreateDirectory(Path.GetDirectoryName(filePath));

            // Load existing reservations if the file exists
            if (File.Exists(filePath))
            {
                Reservations = (List<Reservation>)BinaryDeserialize(filePath);
            }
        }
        public void Persist(object data, string filePath)
        {
            FileStream fileStream;
            BinaryFormatter binFormat = new BinaryFormatter();
            fileStream = File.Create(filePath);
            binFormat.Serialize(fileStream, data);
            fileStream.Close();

        }

        public object BinaryDeserialize(string filePath)
        {
            object obj = null;
            FileStream fileStream;
            BinaryFormatter bf = new BinaryFormatter();
            fileStream = File.OpenRead(filePath);
            obj = bf.Deserialize(fileStream);
            fileStream.Close();
            return obj;
        }
    }

    private string GenerateReservationCode()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 6)
        .Select(s => s[random.Next(s.Length)]).ToArray());
    }
    public void CreateReservationCode()
    {
        reservationCode = GenerateReservationCode();
    }

    protected override async Task OnInitializedAsync()
    {
        reservationManager = new ReservationManager();
        await LoadFlightsAsync();
    }

    private async Task LoadFlightsAsync()
    {
        Directory.CreateDirectory(Path.GetDirectoryName(flightsFilePath));

        if (!File.Exists(flightsFilePath))
        {
            using (var packageStream = await FileSystem.OpenAppPackageFileAsync("flights.csv"))
            using (var fileStream = File.Create(flightsFilePath))
            {
                await packageStream.CopyToAsync(fileStream);
            }
        }

        try
        {
            using var stream = await FileSystem.OpenAppPackageFileAsync("flights.csv");
            using var reader = new StreamReader(stream);

            var flights = await reader.ReadToEndAsync();
            flightsArray = flights.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);
        }
        catch (FileNotFoundException ex)
        {
            flightsText = "Flights file not found.";
        }
    }

    private async Task SearchFlights()
    {
        try
        {
            var filteredFlights = flightsArray
                .Where(flight =>
                {
                    var elements = flight.Split(',');
                    return elements.Length >= 5 &&
                        elements[2].Trim().Equals(from, StringComparison.OrdinalIgnoreCase) &&
                        elements[3].Trim().Equals(to, StringComparison.OrdinalIgnoreCase) &&
                        elements[4].Trim().Equals(day, StringComparison.OrdinalIgnoreCase);
                });

            if (filteredFlights.Any())
            {
                var selectedFlight = filteredFlights.First();
                var elements = selectedFlight.Split(',');
                reserveFlightCode = elements[0];
                reserveAirline = elements[1];
                reserveDay = elements[4];
                reserveTime = elements[5];
                reserveCost = elements[7];
            }

            flightsText = string.Join("\n", filteredFlights);
        }
        catch (FileNotFoundException ex)
        {
            flightsText = "Flights file not found.";
        }
    }

    private async Task ReserveFlight()
    {
        if (string.IsNullOrEmpty(reserveFlightCode))
        {
            reservedFlight = "A reservation is to be made but no flight is selected";
            return;
        }
        else if (string.IsNullOrEmpty(reserveName))
        {
            reservedFlight = "The name field is empty";
            return;
        }
        else if (string.IsNullOrEmpty(reserveCitizenship))
        {
            reservedFlight = "The citizenship field is empty";
            return;
        }
        try
        {
            var matchingFlight = flightsArray.FirstOrDefault(flight =>
            {
                var elements = flight.Split(',');
                return elements.Length >= 5 &&
                    elements[0].Trim().Equals(reserveFlightCode, StringComparison.OrdinalIgnoreCase);
            });
            if (matchingFlight != null)
            {
                CreateReservationCode();
                var elements = matchingFlight.Split(',');
                var seatsAvailable = int.Parse(elements[6]);
                if (seatsAvailable > 0)
                {
                    // Update the seats count in the flights data
                    seatsAvailable--;
                    elements[6] = seatsAvailable.ToString();
                    flightsArray[Array.IndexOf(flightsArray, matchingFlight)] = string.Join(",", elements);
                    UpdateFlightsDataFile();

                    // Create and persist the reservation
                    Reservation newReservation = new Reservation
                        {
                            ReservationCode = reservationCode,
                            FlightCode = reserveFlightCode,
                            Airline = reserveAirline,
                            Cost = reserveCost,
                            Name = reserveName,
                            Citizenship = reserveCitizenship,
                            IsActive = true
                        };

                    reservationManager.Reservations.Add(newReservation);
                    reservationManager.Persist(reservationManager.Reservations, filePath);

                    reservedFlight = $"Reservation successful. Code: {newReservation.ReservationCode}";
                }
                else
                {
                    reservedFlight = "There are no seats available";
                }
            }
            else
            {
                reservedFlight = "Flight not found.";
            }
        }
        catch (Exception ex)
        {
            reservedFlight = $"An error occurred: {ex.Message}";
        }
    }
    private void UpdateFlightsDataFile()
    {
        var updatedFlights = string.Join("\n", flightsArray);
        File.WriteAllText("flights.csv", updatedFlights);
    }

}



