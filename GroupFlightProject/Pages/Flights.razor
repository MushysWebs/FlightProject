@*
    Names: Ricky To, Grady Spurril, Logan Hoppen
    Date: November 14th 2023
    Description:    This page is for searching flights and creating reservations in Traveless.
                    It enables the user to input search criteria (origin, destination, and departure day) 
                    to locate available flights from a CSV file. 
                    The user can then make a reservation by selecting a flight and providing
                    passenger details. The reservation is processed by generating a code and 
                    saving the reservation details to a local storage file.
                    The output includes a list of flights matching the search criteria and a confirmation
                    message with a reservation code upon successful reservation.

*@

@page "/flights"
@using System.IO
@using System.Diagnostics;
@using System.Text.Json;
@using Microsoft.Extensions.Logging

<h4>Flight Finder</h4>

<div class="flex-container">            @* Input section for searching flights *@

    <div class="input-group">
        <label for="from">From:</label>
        <input class="input-field"      @bind="from" />
    </div>

    <div class="input-group">
        <label for="to">To:</label>
        <input class="input-field"      @bind="to" />
    </div>

    <div class="input-group">
        <label for="day">Day:</label>
        <input class="input-field"      @bind="day" />
    </div>
                                        @* Search button triggers the SearchFlights method *@
    <button type="submit" class="btn"   @onclick="SearchFlights">Find flights</button>
</div>

                                        @* Displays the list of flights based on the search criteria *@
<div class="input-row">
    <h4 class="midheading">Flights</h4>
    <textarea class="input-field" readonly rows=1>@flightsText</textarea>
</div>

                                        @* Reservation section where users can reserve flights and input passenger details *@
<div class="input-row">
    <h4 class="botheading">Reserve</h4>
                                        @* Non editable inputs for displaying selected flight information *@
    <div class="input-group">
        <label for="reserveFlightCode">Flight code:</label>
        <input class="input-field"      @bind="reserveFlightCode" readonly />
    </div>

    <div class="input-group">
        <label for="reserveAirline">Airline:</label>
        <input class="input-field"      @bind="reserveAirline" readonly />
    </div>

    <div class="input-group">
        <label for="reserveDay">Day:</label>
        <input class="input-field"      @bind="reserveDay" readonly />
    </div>

    <div class="input-group">
        <label for="reserveTime">Time:</label>
        <input class="input-field"      @bind="reserveTime" readonly />
    </div>

    <div class="input-group">
        <label for="reserveCost">Cost:</label>
        <input class="input-field"      @bind="reserveCost" readonly />
    </div>

    <div class="input-group">           @* Editable inputs for inputting passenger info *@
        <label for="reserveName">Name:</label>
        <input class="input-field"      @bind="reserveName" />
    </div>

    <div class="input-group">
        <label for="reserveCost">Citizenship:</label>
        <input class="input-field"      @bind="reserveCitizenship" />
    </div>
                                        @* Button to submit the reservation *@
    <button class="reserve" @onclick="ReserveFlight">Reserve</button>

                                        @* Displays the reservation code or errors if unsuccesful*@
    <div class="flex-container">
        <p>@reservedFlight</p>
    </div>
</div>

<!--Styling for the flight finder page-->
<style>

    p {
        display: flex;
        margin: 30px;
        text-align: center;
    }

    h4 {
        text-align: center;
    }

    .midheading {
        margin-top: 35px;
    }

    .botheading {
        margin-top: 35px;
        margin-bottom: -10px;
    }

    .flex-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
        width: 100%;
    }

    .input-group {
        margin-bottom: 3px;
        flex: 1;
        display: flex;
    }

    .input-field {
        border: 1px solid #CCCCCC;
    }

    .input-field, .btn, .btnbot {
        width: 100%;
        box-sizing: border-box;
        border-radius: 5px;
        height: 35px;
    }

    .btn {
        flex: 1;
        background-color: #007BFF;
        color: white;
        border: none;
        cursor: pointer;
        margin-top: 20px;
    }

    .reserve {
        display: flex;
        padding: 10px 20px;
        background-color: #007BFF;
        color: white;
        border: none;
        cursor: pointer;
        width: 250px;
        margin: 0 auto;
        border-radius: 5px;
        margin-top: 20px;
        margin-bottom: 20px;
        justify-content: center;
        align-items: center;
    }

    .reserve:hover {
        background-color: #0056b3;
    }

    .btn:hover {
        background-color: #0056b3;
    }

</style>


@code {
    //Array to hold flight data from CSV                                                    
    private string[] flightsArray;
    //Instance of ReservationManager for reservation operations
    private ReservationManager reservationManager;     
    //Path to the reservation files in local appdata directory
    private string reservationsFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Traveless", "reservations.bin");

    //Properties for holding the flight search and reservation info
    public string reservationCode { get; set; }
    public string from { get; set; }
    public string to { get; set; }
    public string day { get; set; }
    public string flightsText { get; set; }

    public string reservedFlight {get; set; }
    public string reserveFlightCode { get; set; }
    public string reserveAirline { get; set; }
    public string reserveDay { get; set; }
    public string reserveTime { get; set; }
    public string reserveCost { get; set; }
    public string reserveName { get; set; }
    public string reserveCitizenship { get; set; }

    protected override async Task OnInitializedAsync()  
    @* Instantiate the reservation manager and load flights upon initialization *@
    {                             
        reservationManager = new ReservationManager();
        reservedFlight = "Reservation Code:";
        await LoadFlights();
    }

    private async Task LoadFlights()                    @* Load flights from the CSV file and store them *@
    {
        try                         
        {   // Open the CSV file as a stream and read from it
            using var stream = await FileSystem.OpenAppPackageFileAsync("flights.csv");
            using var reader = new StreamReader(stream);
            var flights = await reader.ReadToEndAsync();

            //Split it by new lines into the array of flights
            flightsArray = flights.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
        }
        catch (Exception ex)
        {
            flightsText = $"Error loading flights: {ex.Message}";
        }
    }

    private void SearchFlights()                        @* Filter flights then update the flightsText *@
    {                           
        var filteredFlights = flightsArray
            .Where(flight =>
            {
                //Split the CVS row into individual elements
                var elements = flight.Split(',');

                //Check if the flight matches the search criteria
                return elements.Length >= 5 &&
                    elements[2].Trim().Equals(from, StringComparison.OrdinalIgnoreCase) &&
                    elements[3].Trim().Equals(to, StringComparison.OrdinalIgnoreCase) &&
                    elements[4].Trim().Equals(day, StringComparison.OrdinalIgnoreCase);
            });

        // Check if any flights were found that match the criteria
        if (filteredFlights.Any())
        {
            // Select the first flight that matches the criteria
            var selectedFlight = filteredFlights.First();

            // Split the flight details into individual elements
            var elements = selectedFlight.Split(',');

            // Bind the flight details to the UI elements for display
            reserveFlightCode = elements[0];
            reserveAirline = elements[1];
            reserveDay = elements[4];
            reserveTime = elements[5];
            reserveCost = elements[7];
        }

        // Join all filtered flights into a single string to display in the UI
        flightsText = string.Join("\n", filteredFlights);
    }

    private async Task ReserveFlight()                    @* Create a reservation if the selected flight has available seats *@
    {
        //Check if all required fields are filled
        if (string.IsNullOrEmpty(reserveFlightCode) || string.IsNullOrEmpty(reserveName) || string.IsNullOrEmpty(reserveCitizenship))
        {
            reservedFlight = "All fields must be filled to make a reservation.";
            return;
        }
        
        //Find a flight in the flights array that matches
        var matchingFlight = flightsArray.FirstOrDefault(flight =>
        {
            var elements = flight.Split(',');
            return elements.Length >= 5 &&
                elements[0].Trim().Equals(reserveFlightCode, StringComparison.OrdinalIgnoreCase);
        });

        //If matching flight is found, attempt to create a reservation
        if (matchingFlight != null)
        {
            //Check if there are availble seats
            var elements = matchingFlight.Split(',');
            if (int.TryParse(elements[6], out var seats) && seats > 0)
            {
                //Generate reservation code
                reservationCode = reservationManager.GenerateReservationCode();

                //Create a new reservation
                Reservation newReservation = new Reservation
                {
                    ReservationCode = reservationCode,
                    FlightCode = reserveFlightCode,
                    Airline = reserveAirline,
                    Cost = reserveCost,
                    Name = reserveName,
                    Citizenship = reserveCitizenship,
                    IsActive = true
                };

                //Add the new reservation to the list and persist it to the file
                reservationManager.Reservations.Add(newReservation);
                reservationManager.Persist();

                //Update the flights array with less seats.
                seats--;
                elements[6] = seats.ToString();
                flightsArray[Array.IndexOf(flightsArray, matchingFlight)] = string.Join(",", elements);

                //Provides confirmation to the user by displaying reservation code
                reservedFlight = $"Reservation Code: {reservationCode}";
            }
            else
            {
                reservedFlight = "There are no seats available.";
            }
        }
        else
        {
            reservedFlight = "Flight not found.";
        }
    }
}
